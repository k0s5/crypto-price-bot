import 'dotenv/config'
import { Bot } from 'grammy'
import { getSession, setFiatCurrency } from './session'
import { fetchPrices } from './coingecko'
import { formatPriceResponse, formatSingleCoinResponse } from './formatters'
import {
  createCoinSelectionKeyboard,
  createCoinDetailsKeyboard,
  createCurrencySelectionKeyboard
} from './keyboards'
import { logger } from './logger'
import { SUPPORTED_COINS } from './types'
import type { CoinSymbol, FiatCurrency } from './types'

const TELEGRAM_BOT_API_KEY = process.env.TELEGRAM_BOT_API_KEY
const COINGECKO_API_KEY = process.env.COINGECKO_API_KEY

if (!TELEGRAM_BOT_API_KEY) {
  throw new Error('Please set the TELEGRAM_BOT_API_KEY environment variable.')
}

if (!COINGECKO_API_KEY) {
  throw new Error('Please set the COINGECKO_API_KEY environment variable.')
}

// Create an instance of the `Bot` class and pass your bot token to it.
const bot = new Bot(TELEGRAM_BOT_API_KEY)

/**
 * /start command handler
 */
bot.command('start', async ctx => {
  const userId = ctx.from?.id
  if (!userId) return

  const session = getSession(userId)

  const replyMessage =
    `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö—Ä–∏–ø—Ç–æ –ü—Ä–∞–π—Å –ë–æ—Ç!</b>\n\n` +
    `üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É.\n\n` +
    `üí° –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É:\n` +
    `<code>/price bitcoin ethereum tron</code>`

  await ctx.reply(replyMessage, {
    parse_mode: 'HTML',
    reply_markup: createCoinSelectionKeyboard(session.fiatCurrency)
  })
})

/**
 * /price command handler
 */
bot.command('price', async ctx => {
  const userId = ctx.from?.id
  if (!userId) return

  const session = getSession(userId)
  const args = ctx.message?.text?.split(' ').slice(1) || []

  if (args.length === 0) {
    const supportedCurrencies = Object.entries(SUPPORTED_COINS)
      .map(([symbol, id]) => `‚Ä¢ ${symbol} (${id})`)
      .join('\n')

    const reply =
      `‚ùå <b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç</b>\n\n` +
      `–ü—Ä–∏–º–µ—Ä: <code>/price bitcoin ethereum tron</code>\n\n` +
      `–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:\n` +
      `${supportedCurrencies}`

    await ctx.reply(reply, { parse_mode: 'HTML' })
    return
  }

  try {
    // Convert arguments to lowercase for API
    const coinIds = args.map(arg => arg.toLowerCase())

    // Fetch prices
    const data = await fetchPrices(coinIds, session.fiatCurrency)

    // Format and send response
    const replyMessage = formatPriceResponse(data, args, session.fiatCurrency)
    await ctx.reply(replyMessage, { parse_mode: 'HTML' })
  } catch (error: any) {
    await ctx.reply(error.message || '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω')
  }
})

/**
 * Callback query handler for coin selection
 */
bot.callbackQuery(/^coin:(.+)$/, async ctx => {
  const userId = ctx.from?.id
  if (!userId) return

  const coinSymbol = ctx.match[1] as CoinSymbol
  const session = getSession(userId)

  try {
    const coinId = SUPPORTED_COINS[coinSymbol]
    const data = await fetchPrices([coinId], session.fiatCurrency)

    const price = data[coinId][session.fiatCurrency.toLowerCase()]
    const cacheKey = `${coinId}-${session.fiatCurrency}`

    const replyMessage = formatSingleCoinResponse(
      coinSymbol,
      price,
      session.fiatCurrency,
      cacheKey
    )

    await ctx.editMessageText(replyMessage, {
      parse_mode: 'HTML',
      reply_markup: createCoinDetailsKeyboard(coinSymbol, session.fiatCurrency)
    })
    await ctx.answerCallbackQuery()
  } catch (error: any) {
    await ctx.answerCallbackQuery({
      text: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã',
      show_alert: true
    })
  }
})

/**
 * Callback query handler for price refresh
 */
bot.callbackQuery(/^refresh:(.+)$/, async ctx => {
  const userId = ctx.from?.id
  if (!userId) return

  const coinSymbol = ctx.match[1] as CoinSymbol
  const session = getSession(userId)

  try {
    const coinId = SUPPORTED_COINS[coinSymbol]
    const data = await fetchPrices([coinId], session.fiatCurrency)

    const price = data[coinId][session.fiatCurrency.toLowerCase()]
    const cacheKey = `${coinId}-${session.fiatCurrency}`

    const replyMessage = formatSingleCoinResponse(
      coinSymbol,
      price,
      session.fiatCurrency,
      cacheKey
    )

    await ctx.editMessageText(replyMessage, {
      parse_mode: 'HTML',
      reply_markup: createCoinDetailsKeyboard(coinSymbol, session.fiatCurrency)
    })
    await ctx.answerCallbackQuery({ text: '‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ' })
  } catch (error: any) {
    await ctx.answerCallbackQuery({
      text: error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏',
      show_alert: true
    })
  }
})

/**
 * Callback query handler for back button
 */
bot.callbackQuery('back', async ctx => {
  const userId = ctx.from?.id
  if (!userId) return

  const session = getSession(userId)

  await ctx.editMessageText('üìä –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É:', {
    reply_markup: createCoinSelectionKeyboard(session.fiatCurrency)
  })
  await ctx.answerCallbackQuery()
})

/**
 * Callback query handler for currency selection menu
 */
bot.callbackQuery('currency', async ctx => {
  await ctx.editMessageText('üí± –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É:', {
    reply_markup: createCurrencySelectionKeyboard()
  })
  await ctx.answerCallbackQuery()
})

/**
 * Callback query handler for setting currency
 */
bot.callbackQuery(/^setcurrency:(.+)$/, async ctx => {
  const userId = ctx.from?.id
  if (!userId) return

  const currency = ctx.match[1] as FiatCurrency
  setFiatCurrency(userId, currency)

  await ctx.editMessageText(
    `‚úÖ –í–∞–ª—é—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>${currency}</b>\n\n` +
      'üìä –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:',
    {
      parse_mode: 'HTML',
      reply_markup: createCoinSelectionKeyboard(currency)
    }
  )
  await ctx.answerCallbackQuery({ text: `–í–∞–ª—é—Ç–∞: ${currency}` })
})

/**
 * Error handler
 */
bot.catch(err => {
  logger.logError('Bot error', err)
  process.exit(1)
})

// Start the bot
bot.start({
  onStart: () => {
    logger.logBotStart()
    console.log('üí¨ Bot is running. Press Ctrl+C to stop.')
  }
})
